bool almostIncreasingSequence(std::vector<int> sequence) {
    if(sequence.size() == 2)    return 1;
    
    // Iterate through sequence.size():
    /*for (int i = 0; i < sequence.size(); i++) {
        std::vector<int> temporary;
        temporary = sequence;
        temporary.erase(temporary.begin() + i);
        
        // Special edge case:
        if (temporary.size() == 1) {
            return true;
        }
        
        // Normal check:
        for (int j = 1; j < temporary.size(); j++) {
            bool tempFlag = true;
            if (temporary[j] <= temporary[j - 1]) {
                tempFlag = false;
            }
            if (tempFlag == false) {
                j = temporary.size() + 100;
            }
            if ( tempFlag == true && j == temporary.size() - 1) {
                return true;
            }
        }
    }
    return false;*/
    vector<int> a = sequence;
        int n=a.size(), p=-1, c=0;
    for (int i=1;i<n;i++) if (a[i-1]>=a[i]) p=i, c++;
    if (c>1) return 0;
    if (c==0) return 1;
    if (p==n-1 || p==1) return 1;
    if (a[p-1] < a[p+1]) return 1;
    if (a[p-2] < a[p]) return 1;
    return 0;
}
