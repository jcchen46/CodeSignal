int avoidObstacles(std::vector<int> inputArray) {
    /*vector<int> arr(inputArray.size(),0);
    vector<int> na;
    sort(inputArray.begin(),inputArray.end());
    int min = inputArray[0];
    int max = inputArray[inputArray.size()-1];
        
    int s1 = min-1;
    cout << s1 << "  " << max+1 << endl;
    
    int cnt = max+1;
    for(int i=0; i< inputArray.size()-1;i++){
        if(inputArray[i+1]-inputArray[i] > 1)   arr[i] = inputArray[i]+1;
        cout << i << "  " << arr[i] << endl;
    }
    
    for(int j=0; j< inputArray.size()-1;j++){
        if(arr[j] != 0) na.push_back(arr[j]);
        //cout << j << "  " << arr[j] << endl; 
        //cout << arr.size() << endl;
    }
    int tmp = 1000;
    for(int k=0; k< na.size()-1;k++){
        if(na[k+1] - na[k] < tmp)   tmp = na[k+1] - na[k];
    }
    
    return tmp;*/
        // Base case: when source and 
    // destination are same 
    /*int n = inputArray.size();
    
    if (n == 1) 
        return 0; 
  
    // Traverse through all the points 
    // reachable from arr[l] 
    // Recursivel, get the minimum number 
    // of jumps needed to reach arr[h] from 
    // these reachable points 
    int res = INT_MAX; 
    for (int i = n - 2; i >= 0; i--) { 
        if (i + arr[i] >= n - 1) { 
            int sub_res = minJumps(arr, i + 1); 
            if (sub_res != INT_MAX) 
                res = min(res, sub_res + 1); 
        } 
    } 
  
    return res; */
      int length = inputArray.size();

    for (int jumpLength = 1; ; ++jumpLength){
        bool isCaught = false;
        for (int i = 0; i < length && isCaught == false; ++i){
            if (inputArray[i] % jumpLength == 0){
                isCaught = true;
            }
        }
        if (isCaught == false){
            return jumpLength;
        }
    }
}
