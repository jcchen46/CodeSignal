int count0(vector<vector<int>> g, int j){
    int b = 0;
    for(int a = 0; a < 4; a++){
        if(g[a][j] == 0) b++;
    }
    return b;
}

int find0(vector<vector<int>> g, int j, int c = 0){
    if(c == 0){
        for(int a = 0; a < 4; a++){
            if(g[a][j] == 0) return a;
        }
        return 4;
    }else{
        for(int a = c; a < 4; a++){
            if(g[a][j] == 0) return a;
        }
        return 4;
    }
}

vector<vector<int>> game2048(vector<vector<int>> g, string p) {
    // cout << g[j][0] << ' ' << g[j][1] << ' ' << g[j][2] << ' ' << g[j][3] << endl;
    int j, k, t, c = 0;
    for(int i = 0; i < p.size(); i++){
        cout << endl << p[i] << endl;
        if(p[i] == 'R'){            //right correct
            for(j = 0; j < 4; j++){
                //cout << j << endl;
                c = 0;
                //sort '0' with insertion
                int c0 = count(g[j].begin(), g[j].end(), 0);                                //count 0
                int f0 = distance(g[j].begin(), find(g[j].begin(), g[j].end(), 0));         //first 0
                //cout << c0 << ' ' << f0 << endl;
                if(c0 != 0 && c0 != 4){                                                     //0 exists
                    int ct = 0;
                    for(int l = 0; l < c0; l++){
                        if(g[j][l] != 0){
                            int f0 = distance(g[j].begin(), find(g[j].begin()+l, g[j].end(), 0));
                            //cout << f0 << endl;
                            for(int o = f0; o > 0; --o){
                                swap(g[j][o], g[j][o-1]);
                                //cout << g[j][0] << ' ' << g[j][1] << ' ' << g[j][2] << ' ' << g[j][3] << endl;
                            }
                        }
                    }
                }
                
                //combine
                for(k = 3; k > 0; k--){
                    if(g[j][k] == g[j][k-1] && g[j][k] != 0 && c <= 1){
                        c++;
                        g[j][k] *= 2;
                        g[j][k-1] = 0;
                        int n = k-1;
                        while(n > 0 && g[j][n-1] != 0){
                            swap(g[j][n], g[j][n-1]);
                            n--;
                        }
                    }
                }
                cout << g[j][0] << ' ' << g[j][1] << ' ' << g[j][2] << ' ' << g[j][3] << endl;
            }
            
        }else if(p[i] == 'L'){      //left
            for(j = 0; j < 4; j++){
                c = 0;
                //sort '0' with insertion
                int c0 = count(g[j].begin(), g[j].end(), 0);
                int f0 = distance(g[j].begin(), find(g[j].begin(), g[j].end(), 0));
                if(c0 != 0){
                    int ct = 0;
                    while(f0 != (4 - c0)){
                        for(int l = f0;l < 4-ct-1; l++) g[j][l] = g[j][l+1];
                        g[j][4-ct-1] = 0;
                        ct++;
                        f0 = distance(g[j].begin(), find(g[j].begin(), g[j].end(), 0));
                    }
                }
                //Combine
                for(k = 0; k < 3; k++){
                    if(g[j][k] == g[j][k+1] && g[j][k] != 0 && c == 0){
                        c++;
                        g[j][k] *= 2;
                        g[j][k+1] = 0;
                        int n = k+1;
                        while(n+1 <=3 && g[j][n+1] != 0){
                            swap(g[j][n], g[j][n+1]);
                            n++;
                        }
                    }
                }
                cout << g[j][0] << ' ' << g[j][1] << ' ' << g[j][2] << ' ' << g[j][3] << endl;
            }
            
        }else if(p[i] == 'U'){      //up
            for(j = 0; j < 4; j++){
                c = 0;
                //sort '0' with insertion
                int c0 = count0(g, j);
                int f0 = find0(g,j);  
                if(c0 != 0 && c0 != 4){
                    int ct = 0;
                    while(f0 != (4 - c0)){
                        for(int l = f0; l < 4-ct-1; l++) g[l][j] = g[l+1][j];
                        g[4-ct-1][j] = 0;
                        ct++;
                        f0 = find0(g,j);
                    }
                }
                //Combine
                for(k = 0; k < 3; k++){
                    if(g[k][j] == g[k+1][j] && g[k][j] != 0 && c <= 1){
                        c++;
                        g[k][j] *= 2;
                        g[k+1][j] = 0;
                        int n = k+1;
                        while(n+1 <=3 && g[n+1][j] != 0){
                            swap(g[n][j], g[n+1][j]);
                            n++;
                        }
                    }
                }
            }
            for(j = 0; j < 4; j++) cout << g[j][0] << ' ' << g[j][1] << ' ' << g[j][2] << ' ' << g[j][3] << endl;
            
        }else if(p[i] == 'D'){      //down correct
            for(j = 0; j < 4; j++){
                //cout << j << endl;
                c = 0;
                //sort '0' with insertion
                int c0 = count0(g, j);                                  //count 0
                int f0 = find0(g, j);                                   //first 0
                //cout << c0 << ' ' << f0 << endl;
                if(c0 != 0 && c0 != 4){                                 //0 exists
                    int ct = 0;
                    for(int l = 0; l < c0; l++){
                        if(g[l][j] != 0){
                            int f0 = find0(g, j, l);
                            for(int o = f0; o > 0; --o){
                                swap(g[o][j], g[o-1][j]);
                            }
                        }
                    }
                }
                
                //combine
                for(k = 3; k > 0; k--){
                    if(g[k][j] == g[k-1][j] && g[k][j] != 0 && c <= 1){
                        c++;
                        g[k][j] *= 2;
                        g[k-1][j] = 0;
                        int n = k-1;
                        while(n > 0 && g[n-1][j] != 0){
                            swap(g[n][j], g[n-1][j]);
                            n--;
                        }
                    }
                }
            }
            for(j = 0; j < 4; j++) cout << g[j][0] << ' ' << g[j][1] << ' ' << g[j][2] << ' ' << g[j][3] << endl;
        }
    }
    return g;
}
